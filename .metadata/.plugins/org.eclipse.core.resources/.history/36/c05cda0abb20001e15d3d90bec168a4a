package com.ComuniCate.proj.Service;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.ComuniCate.proj.Entity.Photo;
import com.ComuniCate.proj.Entity.Report;
import com.ComuniCate.proj.Entity.User;
import com.ComuniCate.proj.Model.ReportDTO;
import com.ComuniCate.proj.Repository.ReportRepository;
import com.ComuniCate.proj.Repository.UserRepository;

import jakarta.persistence.EntityNotFoundException;
import jakarta.transaction.Transactional;

@Service
public class ReportService {

	@Autowired
	ReportRepository db;
	@Autowired
	UserRepository dbUser;
	@Autowired
	private PhotoService dbPhoto;
	
	@Transactional
	public Report add(ReportDTO r, List<MultipartFile> photoFiles) throws IOException {
		System.out.println(r.getUsername());
		if (!dbUser.existsByUsername(r.getUsername())) {
			throw new EntityNotFoundException("Username doesn't exist in Database!");
		}
		//Reecupera l'oggeto User dal database grazie allo Username
		User user = dbUser.findByUsername(r.getUsername()).get();

		Report rep = new Report();
		rep.setDescription(r.getDescription());
		rep.setLatitude(r.getLatitude());
		rep.setLongitude(r.getLongitude());
		rep.setReportType(r.getReportType());
		rep.setUser(user);

		List<Photo> photos = new ArrayList<>();

		if (photoFiles != null && !photoFiles.isEmpty()) {
			for (MultipartFile photoFile : photoFiles) {
				byte[] imageData = photoFile.getBytes();
				String fileName = photoFile.getOriginalFilename();

				// Recupera l'oggetto Photo dal database invece di crearne uno nuovo
				Photo photo = dbPhoto.findByFileName(fileName);
				if (photo == null) {
					// Se l'oggetto Photo non esiste, utilizza uploadImage per salvarlo nel database
					photo = dbPhoto.uploadImage(photoFile);
				}

				// Aggiungi l'oggetto Photo alla lista delle foto del Report
				photos.add(photo);
			}
		}

		rep.setPhotos(photos);

		for (Photo photo : photos) {
			photo.setReport(rep);
		}

		return db.save(rep);
	}

	public Report update(ReportDTO r, long id, long userId, List<MultipartFile> photoFiles) throws IOException {
	    if (!db.existsById(id)) {
	        throw new EntityNotFoundException("Report doesn't exist in the database!");
	    }
	    Report report = db.findById(id).get();

	    // Verifica che l'utente associato al report corrisponda all'ID dell'utente passato
	    if (report.getUser().getId() != userId) {
	        throw new IllegalArgumentException("User ID mismatch!");
	    }

	    // Aggiorna i campi del report con i nuovi valori
	    report.setDescription(r.getDescription());
	    report.setLatitude(r.getLatitude());
	    report.setLongitude(r.getLongitude());
	    report.setReportType(r.getReportType());

	    // Aggiorna le senn√≤ vengono cancellate
	    if (photoFiles != null && !photoFiles.isEmpty()) {
	        List<Photo> updatedPhotos = new ArrayList<>();

	        for (MultipartFile photoFile : photoFiles) {
	            byte[] imageData = photoFile.getBytes();
	            String fileName = photoFile.getOriginalFilename();

	            // Crea un nuovo oggetto Photo per ogni nuova foto fornita
	            Photo photo = new Photo();
	            photo.setName(fileName);
	            photo.setImageData(imageData);
	            photo.setReport(report);

	            updatedPhotos.add(photo);
	        }

	        // Sostituisci le foto esistenti con le nuove foto
	        report.setPhotos(updatedPhotos);
	    }

	    return db.save(report);
	}


	public String delete(long id) {
		if (!db.existsById(id)) {
			throw new EntityNotFoundException("Report doesn't exist in database!");
		}
		db.deleteById(id);
		return "Report removed successfully!";
	}

	public Report getById(long id) {
		if (!db.existsById(id)) {
			throw new EntityNotFoundException("Report doesn't exist in database!");
		}
		return db.findById(id).get();
	}

	public List<Report> getAll() {
		return db.findAll();
	}

	@Transactional
    public List<Report> findAllByUserName(String username) {
		System.out.println(username);
		if (!dbUser.existsByUsername(username)) {
			throw new EntityNotFoundException("Username doesn't exist in Database!");
		}
        if (dbUser.findByUsername(username).get().getReport().isEmpty()) {
            throw new EntityNotFoundException("There are no reports in the database!");
        }

        List<Report> reports = dbUser.findByUsername(username).get().getReport();
        for (Report report : reports) {
            List<Photo> photos = report.getPhotos();
            for (Photo photo : photos) {
                String fileName = photo.getName();
                byte[] imageData = dbPhoto.downloadImage(fileName);
                String imageUrl = "http://localhost:8080/api/photo/" + photo.getName();
                photo.setImageUrl(imageUrl);
            }
        }

        return reports;
    }

}
