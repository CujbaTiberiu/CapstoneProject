<?xml version="1.0" encoding="UTF-8"?>
<section name="Workbench">
	<section name="org.eclipse.ui.texteditor.FindReplaceDialog">
		<item key="selection" value="&#x0D;&#x0A;&#x09;@Transactional&#x0D;&#x0A;&#x09;public Report update(ReportDTO r, long id, long userId, List&lt;MultipartFile&gt; photoFiles) throws IOException {&#x0D;&#x0A;&#x09;    if (!db.existsById(id)) {&#x0D;&#x0A;&#x09;        throw new EntityNotFoundException(&quot;Report doesn&apos;t exist in the database!&quot;);&#x0D;&#x0A;&#x09;    }&#x0D;&#x0A;&#x09;    Report report = db.findById(id).get();&#x0D;&#x0A;&#x09;    List&lt;Photo&gt; photos = new ArrayList&lt;&gt;();&#x0D;&#x0A;&#x09;    // Verifica che l&apos;utente associato al report corrisponda all&apos;ID dell&apos;utente passato&#x0D;&#x0A;&#x09;    if (report.getUser().getId() != userId) {&#x0D;&#x0A;&#x09;        throw new EntityNotFoundException(&quot;User with this ID doesn&apos;t exist in database!&quot;);&#x0D;&#x0A;&#x09;    }&#x0D;&#x0A;&#x0D;&#x0A;&#x09;    // Aggiorna i campi del report con i nuovi valori&#x0D;&#x0A;&#x09;    report.setDescription(r.getDescription());&#x0D;&#x0A;&#x09;    report.setLatitude(r.getLatitude());&#x0D;&#x0A;&#x09;    report.setLongitude(r.getLongitude());&#x0D;&#x0A;&#x09;    report.setReportType(r.getReportType());&#x0D;&#x0A;&#x09;    report.setStatus(r.getStatus());&#x0D;&#x0A;&#x09;    report.setUser(dbUser.findById(userId).get());&#x0D;&#x0A;&#x0D;&#x0A;&#x09;    // Aggiorna le foto&#x0D;&#x0A;&#x09;    for (MultipartFile photoFile : photoFiles) {&#x0D;&#x0A;&#x09;        byte[] imageData = photoFile.getBytes();&#x0D;&#x0A;&#x09;        String fileName = photoFile.getOriginalFilename();&#x0D;&#x0A;&#x0D;&#x0A;&#x09;        // Cerca se esiste già un&apos;istanza di Photo con lo stesso nome del file&#x0D;&#x0A;&#x09;        Photo existingPhoto = dbPhoto.findByFileName(fileName);&#x0D;&#x0A;&#x09;        if (existingPhoto != null) {&#x0D;&#x0A;&#x09;            // Se esiste, sovrascrivi l&apos;immagine e mantieni l&apos;istanza esistente&#x0D;&#x0A;&#x09;            existingPhoto.setImageData(imageData);&#x0D;&#x0A;&#x09;            existingPhoto.setType(photoFile.getContentType());&#x0D;&#x0A;&#x09;            photos.add(existingPhoto);&#x0D;&#x0A;&#x09;        } else {&#x0D;&#x0A;&#x09;            // Altrimenti, crea una nuova istanza di Photo&#x0D;&#x0A;&#x09;            Photo newPhoto = new Photo();&#x0D;&#x0A;&#x09;            newPhoto.setName(fileName);&#x0D;&#x0A;&#x09;            newPhoto.setImageData(imageData);&#x0D;&#x0A;&#x09;            newPhoto.setType(photoFile.getContentType());&#x0D;&#x0A;&#x09;            newPhoto.setReport(report);&#x0D;&#x0A;&#x09;            photos.add(newPhoto);&#x0D;&#x0A;&#x09;        }&#x0D;&#x0A;&#x09;    }&#x0D;&#x0A;&#x0D;&#x0A;&#x09;    report.setPhotos(photos);&#x0D;&#x0A;&#x0D;&#x0A;&#x09;    return db.save(report);&#x0D;&#x0A;&#x09;}"/>
		<list key="findhistory">
			<item value="&#x0D;&#x0A;&#x09;@Transactional&#x0D;&#x0A;&#x09;public Report update(ReportDTO r, long id, long userId, List&lt;MultipartFile&gt; photoFiles) throws IOException {&#x0D;&#x0A;&#x09;    if (!db.existsById(id)) {&#x0D;&#x0A;&#x09;        throw new EntityNotFoundException(&quot;Report doesn&apos;t exist in the database!&quot;);&#x0D;&#x0A;&#x09;    }&#x0D;&#x0A;&#x09;    Report report = db.findById(id).get();&#x0D;&#x0A;&#x09;    List&lt;Photo&gt; photos = new ArrayList&lt;&gt;();&#x0D;&#x0A;&#x09;    // Verifica che l&apos;utente associato al report corrisponda all&apos;ID dell&apos;utente passato&#x0D;&#x0A;&#x09;    if (report.getUser().getId() != userId) {&#x0D;&#x0A;&#x09;        throw new EntityNotFoundException(&quot;User with this ID doesn&apos;t exist in database!&quot;);&#x0D;&#x0A;&#x09;    }&#x0D;&#x0A;&#x0D;&#x0A;&#x09;    // Aggiorna i campi del report con i nuovi valori&#x0D;&#x0A;&#x09;    report.setDescription(r.getDescription());&#x0D;&#x0A;&#x09;    report.setLatitude(r.getLatitude());&#x0D;&#x0A;&#x09;    report.setLongitude(r.getLongitude());&#x0D;&#x0A;&#x09;    report.setReportType(r.getReportType());&#x0D;&#x0A;&#x09;    report.setStatus(r.getStatus());&#x0D;&#x0A;&#x09;    report.setUser(dbUser.findById(userId).get());&#x0D;&#x0A;&#x0D;&#x0A;&#x09;    // Aggiorna le foto&#x0D;&#x0A;&#x09;    for (MultipartFile photoFile : photoFiles) {&#x0D;&#x0A;&#x09;        byte[] imageData = photoFile.getBytes();&#x0D;&#x0A;&#x09;        String fileName = photoFile.getOriginalFilename();&#x0D;&#x0A;&#x0D;&#x0A;&#x09;        // Cerca se esiste già un&apos;istanza di Photo con lo stesso nome del file&#x0D;&#x0A;&#x09;        Photo existingPhoto = dbPhoto.findByFileName(fileName);&#x0D;&#x0A;&#x09;        if (existingPhoto != null) {&#x0D;&#x0A;&#x09;            // Se esiste, sovrascrivi l&apos;immagine e mantieni l&apos;istanza esistente&#x0D;&#x0A;&#x09;            existingPhoto.setImageData(imageData);&#x0D;&#x0A;&#x09;            existingPhoto.setType(photoFile.getContentType());&#x0D;&#x0A;&#x09;            photos.add(existingPhoto);&#x0D;&#x0A;&#x09;        } else {&#x0D;&#x0A;&#x09;            // Altrimenti, crea una nuova istanza di Photo&#x0D;&#x0A;&#x09;            Photo newPhoto = new Photo();&#x0D;&#x0A;&#x09;            newPhoto.setName(fileName);&#x0D;&#x0A;&#x09;            newPhoto.setImageData(imageData);&#x0D;&#x0A;&#x09;            newPhoto.setType(photoFile.getContentType());&#x0D;&#x0A;&#x09;            newPhoto.setReport(report);&#x0D;&#x0A;&#x09;            photos.add(newPhoto);&#x0D;&#x0A;&#x09;        }&#x0D;&#x0A;&#x09;    }&#x0D;&#x0A;&#x0D;&#x0A;&#x09;    report.setPhotos(photos);&#x0D;&#x0A;&#x0D;&#x0A;&#x09;    return db.save(report);&#x0D;&#x0A;&#x09;}"/>
		</list>
	</section>
</section>
